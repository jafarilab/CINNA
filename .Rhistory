"Information Centrality" = function(x)infocent(y)
)
if (exists(include)){
centrality_funcs <- centrality_funcs[intersect(names(centrality_funcs), include)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
else{
centrality_funcs <- centrality_funcs[setdiff(names(centrality_funcs), except)]
n <- names(centFuncs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centFuncs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
}
}
calculate_centralities(zachary)
calculate_centralities <- function( x, except = NULL, include = NULL, weights = NULL){
if(!(class(x)%in%"igraph" && is_connected(x) )) stop("The input is not an igraph object
or may not be connected.")
y <- as_edgelist(x)
y <- network(y)
if(!is_directed(x) && !is_weighted(x)) {
centrality_funcs <- list(
"subgraph centrality scores" = function(x)subgraph.centrality(x),
"Topological Coefficient" = function(x)topocoefficient(x),
"Average Distance" = function(x)averagedis(x, weights = NULL),
"Barycenter Centrality" = function(x)barycenter(x, weights = NULL),
"BottleNeck Centrality" = function(x)bottleneck(x),
"Centroid value" = function(x)centroid(x, weights = NULL),
"Closeness Centrality (Freeman)" = function(x)closeness.freeman(x, weights = NULL),
"ClusterRank" = function(x)clusterrank(x),
"Decay Centrality" = function(x)decay(x, weights = NULL),
"Degree Centrality" = function(x)centr_degree(x)$res,
"Diffusion Degree" = function(x)diffusion.degree(x),
"DMNC - Density of Maximum Neighborhood Component" = function(x)dmnc(x),
"Eccentricity Centrality" = function(x)eccentricity(x),
"eigenvector centralities" = function(x)eigen_centrality(x, weights = NULL)$vector,
"K-core Decomposition" = function(x)coreness(x),
"Geodesic K-Path Centrality" = function(x)geokpath(x, weights = NULL),
"Katz Centrality (Katz Status Index)" = function(x)katzcent(x),
"Kleinberg's authority centrality scores" = function(x)authority_score(x, weights = NULL)$vector,
"Kleinberg's hub centrality scores" = function(x)hub_score(x, weights = NULL)$vector,
"clustering coefficient" = function(x)transitivity(x, weights = NULL,type="local"),
"Lin Centrality" = function(x)lincent(x, weights = NULL),
"Lobby Index (Centrality)" = function(x)lobby(x),
"Markov Centrality" = function(x)markovcent(x),
"Radiality Centrality" = function(x)radiality(x, weights = NULL),
"Shortest-Paths Betweenness Centrality" = function(x)betweenness(x),
"Current-Flow Closeness Centrality" = function(x)closeness.currentflow(x, weights = NULL),
"Closeness centrality (Latora)" = function(x)closeness.latora(x, weights = NULL),
"Communicability Betweenness Centrality" = function(x)communibet(x),
"Community Centrality" = function(x)communitycent(x),
"Cross-Clique Connectivity" = function(x)crossclique(x),
"Entropy Centrality" = function(x)entropy(x, weights = NULL),
"EPC - Edge Percolated Component" = function(x)epc(x),
"Laplacian Centrality" = function(x)laplacian(x),
"Leverage Centrality" = function(x)leverage(x),
"MNC - Maximum Neighborhood Component" = function(x)mnc(x),
"Hubbell Index" = function(x)hubbell(x, weights = NULL),
"Semi Local Centrality" = function(x)semilocal(x),
"Closeness Vitality" = function(x)closeness.vitality(x, weights = NULL),
"Residual Closeness Centrality" = function(x)closeness.residual(x, weights = NULL),
"Stress Centrality" = function(x)stresscent(y),
"Load Centrality" = function(x)loadcent(y),
"Flow Betweenness Centrality" = function(x)flowbet(y),
"Information Centrality" = function(x)infocent(y)
)
if (!is.null(include)){
centrality_funcs <- centrality_funcs[intersect(names(centrality_funcs), include)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
else{
centrality_funcs <- centrality_funcs[setdiff(names(centrality_funcs), except)]
n <- names(centFuncs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centFuncs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
}
}
calculate_centralities(zachary)
calculate_centralities <- function( x, except = NULL, include = NULL, weights = NULL){
if(!(class(x)%in%"igraph" && is_connected(x) )) stop("The input is not an igraph object
or may not be connected.")
y <- as_edgelist(x)
y <- network(y)
if(!is_directed(x) && !is_weighted(x)) {
centrality_funcs <- list(
"subgraph centrality scores" = function(x)subgraph.centrality(x),
"Topological Coefficient" = function(x)topocoefficient(x),
"Average Distance" = function(x)averagedis(x, weights = NULL),
"Barycenter Centrality" = function(x)barycenter(x, weights = NULL),
"BottleNeck Centrality" = function(x)bottleneck(x),
"Centroid value" = function(x)centroid(x, weights = NULL),
"Closeness Centrality (Freeman)" = function(x)closeness.freeman(x, weights = NULL),
"ClusterRank" = function(x)clusterrank(x),
"Decay Centrality" = function(x)decay(x, weights = NULL),
"Degree Centrality" = function(x)centr_degree(x)$res,
"Diffusion Degree" = function(x)diffusion.degree(x),
"DMNC - Density of Maximum Neighborhood Component" = function(x)dmnc(x),
"Eccentricity Centrality" = function(x)eccentricity(x),
"eigenvector centralities" = function(x)eigen_centrality(x, weights = NULL)$vector,
"K-core Decomposition" = function(x)coreness(x),
"Geodesic K-Path Centrality" = function(x)geokpath(x, weights = NULL),
"Katz Centrality (Katz Status Index)" = function(x)katzcent(x),
"Kleinberg's authority centrality scores" = function(x)authority_score(x, weights = NULL)$vector,
"Kleinberg's hub centrality scores" = function(x)hub_score(x, weights = NULL)$vector,
"clustering coefficient" = function(x)transitivity(x, weights = NULL,type="local"),
"Lin Centrality" = function(x)lincent(x, weights = NULL),
"Lobby Index (Centrality)" = function(x)lobby(x),
"Markov Centrality" = function(x)markovcent(x),
"Radiality Centrality" = function(x)radiality(x, weights = NULL),
"Shortest-Paths Betweenness Centrality" = function(x)betweenness(x),
"Current-Flow Closeness Centrality" = function(x)closeness.currentflow(x, weights = NULL),
"Closeness centrality (Latora)" = function(x)closeness.latora(x, weights = NULL),
"Communicability Betweenness Centrality" = function(x)communibet(x),
"Community Centrality" = function(x)communitycent(x),
"Cross-Clique Connectivity" = function(x)crossclique(x),
"Entropy Centrality" = function(x)entropy(x, weights = NULL),
"EPC - Edge Percolated Component" = function(x)epc(x),
"Laplacian Centrality" = function(x)laplacian(x),
"Leverage Centrality" = function(x)leverage(x),
"MNC - Maximum Neighborhood Component" = function(x)mnc(x),
"Hubbell Index" = function(x)hubbell(x, weights = NULL),
"Semi Local Centrality" = function(x)semilocal(x),
"Closeness Vitality" = function(x)closeness.vitality(x, weights = NULL),
"Residual Closeness Centrality" = function(x)closeness.residual(x, weights = NULL),
"Stress Centrality" = function(x)stresscent(y),
"Load Centrality" = function(x)loadcent(y),
"Flow Betweenness Centrality" = function(x)flowbet(y),
"Information Centrality" = function(x)infocent(y)
)
if (!is.null(include)){
centrality_funcs <- centrality_funcs[intersect(names(centrality_funcs), include)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
else{
centrality_funcs <- centrality_funcs[setdiff(names(centrality_funcs), except)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
}
}
calculate_centralities(zachary)
calculate_centralities(zachary,include="Degree Centrality")
calculate_centralities(zachary,xcept=p[4:44])
calculate_centralities(zachary,except=p[4:44])
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except = pr.cent[5:40])
calculate_centralities <- function( x, except = NULL, include = NULL, weights = NULL){
if(!(class(x)%in%"igraph" && is_connected(x) )) stop("The input is not an igraph object
or may not be connected.")
y <- as_edgelist(x)
y <- network(y)
if(!is_directed(x) && !is_weighted(x)) {
centrality_funcs <- list(
"subgraph centrality scores" = function(x)subgraph.centrality(x),
"Topological Coefficient" = function(x)topocoefficient(x),
"Average Distance" = function(x)averagedis(x, weights = NULL),
"Barycenter Centrality" = function(x)barycenter(x, weights = NULL),
"BottleNeck Centrality" = function(x)bottleneck(x),
"Centroid value" = function(x)centroid(x, weights = NULL),
"Closeness Centrality (Freeman)" = function(x)closeness.freeman(x, weights = NULL),
"ClusterRank" = function(x)clusterrank(x),
"Decay Centrality" = function(x)decay(x, weights = NULL),
"Degree Centrality" = function(x)centr_degree(x)$res,
"Diffusion Degree" = function(x)diffusion.degree(x),
"DMNC - Density of Maximum Neighborhood Component" = function(x)dmnc(x),
"Eccentricity Centrality" = function(x)eccentricity(x),
"eigenvector centralities" = function(x)eigen_centrality(x, weights = NULL)$vector,
"K-core Decomposition" = function(x)coreness(x),
"Geodesic K-Path Centrality" = function(x)geokpath(x, weights = NULL),
"Katz Centrality (Katz Status Index)" = function(x)katzcent(x),
"Kleinberg's authority centrality scores" = function(x)authority_score(x, weights = NULL)$vector,
"Kleinberg's hub centrality scores" = function(x)hub_score(x, weights = NULL)$vector,
"clustering coefficient" = function(x)transitivity(x, weights = NULL,type="local"),
"Lin Centrality" = function(x)lincent(x, weights = NULL),
"Lobby Index (Centrality)" = function(x)lobby(x),
"Markov Centrality" = function(x)markovcent(x),
"Radiality Centrality" = function(x)radiality(x, weights = NULL),
"Shortest-Paths Betweenness Centrality" = function(x)betweenness(x),
"Current-Flow Closeness Centrality" = function(x)closeness.currentflow(x, weights = NULL),
"Closeness centrality (Latora)" = function(x)closeness.latora(x, weights = NULL),
"Communicability Betweenness Centrality" = function(x)communibet(x),
"Community Centrality" = function(x)communitycent(x),
"Cross-Clique Connectivity" = function(x)crossclique(x),
"Entropy Centrality" = function(x)entropy(x, weights = NULL),
"EPC - Edge Percolated Component" = function(x)epc(x),
"Laplacian Centrality" = function(x)laplacian(x),
"Leverage Centrality" = function(x)leverage(x),
"MNC - Maximum Neighborhood Component" = function(x)mnc(x),
"Hubbell Index" = function(x)hubbell(x, weights = NULL),
"Semi Local Centrality" = function(x)semilocal(x),
"Closeness Vitality" = function(x)closeness.vitality(x, weights = NULL),
"Residual Closeness Centrality" = function(x)closeness.residual(x, weights = NULL),
"Stress Centrality" = function(x)stresscent(y),
"Load Centrality" = function(x)loadcent(y),
"Flow Betweenness Centrality" = function(x)flowbet(y),
"Information Centrality" = function(x)infocent(y)
)
if (!is.null(include)){
centrality_funcs <- centrality_funcs[intersect(names(centrality_funcs), include)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
else{
centrality_funcs <- centrality_funcs[setdiff(names(centrality_funcs), except)]
n <- names(centrality_funcs)
warningsText <- ""
result <- lapply(setNames(n, n),
function(functionName, x) {
f <- centrality_funcs[[functionName]]
tryCatch(f(x),
error = function(e) {
warningsText <- paste0(warningsText,
"\nError in ", functionName, ":\n", e$message)
return(NULL)
})
}, x)
if (nchar(warningsText) > 0)
warning(warningsText)
return(result)
}
}
}
calc_cent <- calculate_centralities(zachary, except = pr.cent[5:40])
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except = pr_cent[5:40])
calc_cent
devtools::document()
load_all()
check()
calc_cent <- calculate_centralities(zachary, include = "Degree Centrality")
calc_cent <- calculate_centralities(zachary, except  = pr_cent[4:44])
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except  = pr_cent[4:44])
check()
load_all()
devtools::document()
check()
library(devtools)
library(roxygen2)
devtools::document()
library(roxygen2)
check()
tsne_centralities( calc_cent, dims = 2, perplexity = 0.5, scale=TRUE)
check()
tsne_centralities( calc_cent, dims = 2, perplexity = 5, scale=TRUE)
tsne_centralities( calc_cent, dims = 2, perplexity = 5, scale=TRUE)
check()
check()
devtools::document()
check()
devtools::document()
check()
devtools::document()
check()
library(CINNA)
pack <- "CINNA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
library(CINNA)
devtools::document()
devtools::document()
install.packages("circlize")
?circlize_dendrogram
librar
library(devtools)
library(roxygen2)
devtools::document()
load_all()
check()
check()
devtools::document()
devtools::document()
load_all()
check()
devtools::document()
load_all()
check()
devtools::document()
load_all()
check()
devtools::document()
load_all()
check()
devtools::document()
load_all()
check()
library(devtools)
install.packages("C:/Users/MinoOo/Desktop/FactoMineR_1.38.tar.gz", repos = NULL, type = "source")
library(roxygen2)
devtools::document()
load_all()
check()
data("zachary")
zachary_edgelist <- as_edgelist(zachary)
library(igraph)
zachary_edgelist <- as_edgelist(zachary)
misc_extract_components(zachary_edgelist)
calculate_centralities(zachary, include = "Degree Centrality")
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except  = pr_cent[5:40])
pca_centralities( calc_cent )
x<-calc_cent
x
x <- x[!sapply(x,is.null)]
x <- as.data.frame(x)
x <- na.omit(x)
res_pca <- PCA(x, scale.unit = scale.unit, ncp = ncp, graph = graph, axes = axes)
library(FactoMineR)
res_pca <- PCA(x, scale.unit = scale.unit, ncp = ncp, graph = graph, axes = axes)
res_pca <- PCA(x, scale.unit = scale.unit, ncp = 5, graph = F, axes = c(1,2))
res_pca <- PCA(x, scale.unit = TRUE, ncp = 5, graph = F, axes = c(1,2))
PCs <- table(res_pca$eig$"cumulative percentage of variance" > cut.off)["FALSE"] + 1
res_pca$eig
res_pca$eig$"cumulative percentage of variance"
res_pca
res_pca$eig
eig$"cumulative percentage of variance"
res_pca$eig$"cumulative percentage of variance"
class(res_pca$eig)
res_pca$eig[,"cumulative percentage of variance"]
function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no",
"ifany", "always"), dnn = list.names(...), deparse.level = 1)
res_pca$eig["cumulative percentage of variance"]
res_pca$eig["cumulative percentage of variance",]
res_pca$eig[,"cumulative percentage of variance"]
PCs <- table(res_pca$eig[,"cumulative percentage of variance"] > cut.off)["FALSE"] + 1
PCs <- table(res_pca$eig[,"cumulative percentage of variance"] > 80)["FALSE"] + 1
if(PCs %in% NA) PCs=1
fviz_contrib(res_pca, choice = "var", axes = PCs, color = "black", fill = "turquoise")+
labs(x="\nCentrality measures", y="Contributions\n") +
theme_grey() +ggtitle("Contribution of variables via PCA")+
theme(axis.text.x=element_text(angle=45, vjust=0.5),plot.title = element_text(hjust = 0.5)
,panel.border = element_rect(colour = "black", fill=NA, size=1.5)
)
devtools::document()
load_all()
check()
pack <- "CINNA"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
install.packages("CINNA")
library(CINNA)
data("zachary")
calculate_centralities(zachary, include = "Stress Centrality")
summary_calculate_centralities(calculate_centralities(zachary, include = "Stress Centrality"))
summary_calculate_centralities <- function(x){
x <- x[!sapply(x, is.null)]
x <- na.omit(x)
summary_list <- lapply(x, function(x) summary(x))
return(summary_list)
}
summary_calculate_centralities(calculate_centralities(zachary, include = "Stress Centrality"))
View(summary_calculate_centralities)
calculate_centralities(zachary, include = "Stress Centrality")
library(CINNA)
summary_calculate_centralities(calculate_centralities(zachary, include = "Stress Centrality"))
summary_calculate_centralities <- function(x){
x <- x[!sapply(x, is.null)]
x <- na.omit(x)
summary_list <- lapply(x, function(x) summary(x))
return(summary_list)
}
summary_calculate_centralities <- function(x){
x <- x[!sapply(x, is.null)]
x <- na.omit(x)
summary_list <- lapply(x, function(x) summary(x))
return(summary_list)
}
data("zachary")
calculate_centralities(zachary, include = c("Alpha Centrality","Burt's Constraint"))
calculate_centralities(zachary, include = c("Alpha Centrality","Burt's Constraint"))
library(CINNA)
data("zachary")
zachary
graph_extract_components(zachary)
zachary_edgelist <- as_edgelist(zachary)
proper_centralities(zachary)
calculate_centralities(zachary, include = "Degree Centrality")
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except  = pr_cent[5:40])
pca_centralities( calc_cent )
pca_centralities( calc_cent , scale.unit = FALSE )
tsne_centralities( calc_cent, dims = 2, perplexity = 1, scale=TRUE)
visualize_graph( zachary , centrality.type="Degree Centrality")
data("zachary")
calculate_centralities(zachary, include = "Degree Centrality")
calc_cent <- calculate_centralities(zachary, except  = pr_cent[5:40])
calc_cent <- calculate_centralities(zachary, except  = pr_cent[5:40])
pr_cent <- proper_centralities(zachary)
calc_cent <- calculate_centralities(zachary, except  = pr_cent[5:40])
library(roxygen2)
library(devtools)
devtools::document()
load_all()
check()
devtools::document()
load_all()
read.table
install.packages("CINNA")
install.packages("C:/Users/MinoOo/Desktop/CINNA_1.1.1.tar.gz", repos = NULL, type = "source")
library(CINNA)
data("zachary")
c<-calculate_centralities(c)
c<-calculate_centralities(zachary)
c<-calculate_centralities(zachary,include = "Stress Centrality")
summary.calculate_centralities(c)
install.packages("CINNA")
library(CINNA)
data("zachary")
c<-calculate_centralities(zachary, include = "Degree centrality")
summary.pca_centralities(c)
?write.csv
library(roxygen2)
library(devtools)
devtools::document()
load_all()
devtools::check()
devtools::check()
library(CINNA)
